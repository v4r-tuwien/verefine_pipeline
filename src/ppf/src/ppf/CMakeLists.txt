cmake_minimum_required(VERSION 3.10)
project(ppf
    VERSION 0.2.2
    LANGUAGES CXX
)

## compile settings
set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED on)

## add self defined find scripts to cmake module path
list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_LIST_DIR}/cmake")

## find dependencies
find_package(PythonLibs 3.6 REQUIRED)

find_package(Boost REQUIRED)
find_package(Boost REQUIRED COMPONENTS program_options)

include_directories(${Boost_INCLUDE_DIRS} ${PYTHON_INCLUDE_DIRS}) #${PYTHON_INCLUDE_DIRS})
link_libraries(${Boost_LIBRARIES} ${PYTHON_LIBRARIES}) #${PYTHON_LIBRARIES})

find_package(PCL 1.8 REQUIRED COMPONENTS
    common
    keypoints
    search
    filters
    features
    io
    surface
    visualization
)

include(DefinePCLImportedTarget)
define_pcl_imported_target()

find_package(CMPH REQUIRED)

find_package(glog 0.4.0 REQUIRED)

find_package(OpenMP REQUIRED)

find_package(OpenCV 3 REQUIRED)

find_package(pybind11 CONFIG REQUIRED)

## collect include and source files
file(GLOB_RECURSE V4R_SOURCES
    ${CMAKE_CURRENT_SOURCE_DIR}/src/v4r/*.cpp
)

file(GLOB_RECURSE PPF_SOURCES
    ${CMAKE_CURRENT_SOURCE_DIR}/src/ppf/*.cpp
)

file(GLOB RECOGNIZER_SOURCES
    ${CMAKE_CURRENT_SOURCE_DIR}/src/*.cpp
)

## add targets
add_library(v4r-extracts STATIC ${V4R_SOURCES})
add_library(ppf STATIC ${PPF_SOURCES})
add_library(ppf-recognizer STATIC ${RECOGNIZER_SOURCES})

add_executable(test_ppf_recognizer ${CMAKE_CURRENT_SOURCE_DIR}/src/test_ppf_recognizer.cpp)

pybind11_add_module(pyppf
  src/ppf_python_bindings.cpp
  src/recognition_pipeline.cpp
  src/ppf_recognition_pipeline.cpp
)

## specify dependencies
target_include_directories(v4r-extracts
    PUBLIC  ${CMAKE_CURRENT_SOURCE_DIR}/include
    PRIVATE ${YAML_CPP_INCLUDE_DIR}
)

target_link_libraries(v4r-extracts
    Boost::boost
    glog::glog
    PCL::PCL
    ${OpenCV_LIBS}
    pcl_1_8
)

target_include_directories(ppf
    PUBLIC  ${CMAKE_CURRENT_SOURCE_DIR}/include
)
target_link_libraries(ppf
    Boost::boost
    glog::glog
    CMPH::CMPH
    v4r-extracts
    PCL::PCL
)

target_include_directories(ppf-recognizer
    PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/include
)
target_link_libraries(ppf-recognizer
    Boost::boost
    v4r-extracts
    ppf
    PCL::PCL
    OpenMP::OpenMP_CXX
)

target_include_directories(test_ppf_recognizer
    PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/include
)

target_link_libraries(test_ppf_recognizer
    ppf-recognizer
    Boost::program_options
    PCL::PCL
)

# target_include_directories(pyppf PRIVATE ${PCL_INCLUDE_DIRS})
target_link_libraries(pyppf
  PRIVATE ppf
          v4r-extracts
          Boost::program_options
          ${OpenCV_LIBS}
          PCL::PCL
)

## add subdirectories
add_subdirectory(3rdparty/pcl_1_8) # v4r depends on 3rdparty/pcl_1_8 so this probably needs to be done before defining the targets

## install targets / define export set for exporting from build tree
include(GNUInstallDirs)
set(INSTALL_CONFIGDIR ${CMAKE_INSTALL_LIBDIR}/cmake/PPFRecognizer)

install(TARGETS ppf-recognizer v4r-extracts ppf
    EXPORT ppf-targets
    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
    ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
)

# install header files
install(DIRECTORY include/ DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})

# copy find scripts to build/cmake
configure_file(
    ${CMAKE_CURRENT_SOURCE_DIR}/cmake/FindCMPH.cmake
    ${CMAKE_CURRENT_BINARY_DIR}/FindCMPH.cmake
    COPYONLY
)

## create Config files
include(CMakePackageConfigHelpers)

# Create a ConfigVersion.cmake file
write_basic_package_version_file(
    ${CMAKE_CURRENT_BINARY_DIR}/PPFRecognizerConfigVersion.cmake
    VERSION ${PROJECT_VERSION}
    COMPATIBILITY AnyNewerVersion
)

# create a Config.cmake file
configure_package_config_file(${CMAKE_CURRENT_LIST_DIR}/cmake/PPFRecognizerConfig.cmake.in
    ${CMAKE_CURRENT_BINARY_DIR}/PPFRecognizerConfig.cmake
    INSTALL_DESTINATION ${INSTALL_CONFIGDIR}
)

## export targets from build tree
export(EXPORT ppf-targets FILE ${CMAKE_CURRENT_BINARY_DIR}/PPFRecognizerTargets.cmake NAMESPACE PPFRecognizer::)
